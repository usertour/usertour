# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AccessToken {
  accessToken: String!
  createdAt: DateTime!
  description: String
  expiresAt: DateTime
  id: ID!
  isActive: Boolean!
  lastUsedAt: DateTime
  name: String!
  prefix: String!
  updatedAt: DateTime!
}

input ActiveUserProjectInput {
  projectId: String!
  userId: String!
}

type Analytics {
  totalCompletions: Int!
  totalViews: Int!
  uniqueCompletions: Int!
  uniqueViews: Int!
  viewsByDay: JSON
  viewsByStep: JSON
  viewsByTask: JSON
}

input AnalyticsOrder {
  direction: OrderDirection!
  field: AnalyticsOrderField!
}

"""Properties by which content connections can be ordered."""
enum AnalyticsOrderField {
  createdAt
  id
  updatedAt
}

input AnalyticsQuery {
  contentId: String!
  endDate: String!
  environmentId: String!
  startDate: String!
  timezone: String!
}

type Attribute {
  bizType: Int!
  codeName: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  dataType: Int!
  description: String!
  displayName: String!
  id: ID!
  predefined: Boolean!
  projectId: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type AttributeOnEvent {
  attributeId: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  eventId: String!
  id: ID!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type Auth {
  """JWT access token"""
  accessToken: JWT!
  projectId: String
  redirectUrl: String

  """JWT refresh token"""
  refreshToken: JWT!
  user: User!
}

type AuthConfigItem {
  provider: String!
}

input BizCompanyOnSegmentInput {
  bizCompanyId: String!
  data: JSON
  segmentId: String!
}

type BizConnection {
  edges: [BizModelEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type BizEvent {
  bizSessionId: String!
  bizUserId: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  data: JSON
  event: Events
  eventId: String!
  id: ID!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type BizModel {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  data: JSON
  environmentId: String!
  externalId: String!
  id: ID!
  membership: JSON!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type BizModelEdge {
  cursor: String!
  node: BizModel!
}

input BizOrder {
  direction: OrderDirection!
  field: BizOrderField!
}

"""Properties by which content connections can be ordered."""
enum BizOrderField {
  createdAt
  id
  updatedAt
}

input BizQuery {
  companyId: String
  data: JSON
  environmentId: String
  search: String
  segmentId: String
  userId: String
}

type BizSession {
  bizEvent: [BizEvent!]
  bizUser: BizUser!
  bizUserId: String!
  content: Content
  contentId: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  data: JSON
  id: ID!
  progress: Int!
  state: Int!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  version: Version
}

type BizSessionConnection {
  edges: [BizSessionEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type BizSessionEdge {
  cursor: String!
  node: BizSession!
}

type BizUser {
  bizUsersOnCompany: [BizUserOnCompanyModel!]

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  data: JSON
  environmentId: String!
  externalId: String!
  id: ID!
  membership: JSON!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type BizUserConnection {
  edges: [BizUserEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type BizUserEdge {
  cursor: String!
  node: BizUser!
}

type BizUserOnCompanyModel {
  bizCompany: BizModel
  bizCompanyId: String!
  bizUserId: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  data: JSON
  id: ID!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

input BizUserOnSegmentInput {
  bizUserId: String!
  data: JSON
  segmentId: String!
}

input BizUserOrCompanyIdsInput {
  environmentId: String!
  ids: [String!]!
}

input CancelInviteInput {
  inviteId: String!
  projectId: String!
}

input ChangeEmailInput {
  email: String!
  password: String!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

input ChangeTeamMemberRoleInput {
  projectId: String!
  role: Role!
  userId: String!
}

type Common {
  count: Int!
  success: Boolean!
}

type Content {
  buildUrl: String
  config: JSON
  contentOnEnvironments: [ContentOnEnvironment!]

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  deleted: Boolean!
  editedVersionId: String
  environmentId: String!
  id: ID!
  name: String
  published: Boolean!
  publishedAt: DateTime!
  publishedVersion: Version
  publishedVersionId: String
  steps: [Step!]
  type: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type ContentConnection {
  edges: [ContentEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

input ContentDuplicateInput {
  contentId: String!
  name: String
  targetEnvironmentId: String
}

type ContentEdge {
  cursor: String!
  node: Content!
}

input ContentIdInput {
  contentId: String!
  environmentId: String
}

input ContentInput {
  buildUrl: String
  config: JSON
  data: JSON
  environmentId: String
  name: String
  steps: [StepInput!]
  themeId: String
  type: String!
}

type ContentOnEnvironment {
  contentId: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  environment: Environment!
  environmentId: String!
  id: ID!
  published: Boolean!
  publishedAt: DateTime!
  publishedVersion: Version!
  publishedVersionId: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

input ContentOrder {
  direction: OrderDirection!
  field: ContentOrderField!
}

"""Properties by which content connections can be ordered."""
enum ContentOrderField {
  createdAt
  id
  publishedAt
  updatedAt
}

input ContentQuery {
  environmentId: String!
  name: String
  published: Boolean
  type: String
}

input ContentStepsInput {
  contentId: String!
  steps: [StepInput!]!
  themeId: String!
  versionId: String!
}

input ContentUpdateInput {
  content: UpdateContentInput!
  contentId: String!
}

input ContentVersionInput {
  buildUrl: String
  config: JSON
  data: JSON
  environmentId: String
  name: String
  steps: [StepInput!]
  themeId: String
  type: String
  versionId: String!
}

input CopyThemeInput {
  id: String!
  name: String!
}

input CreatSegment {
  bizType: SegmentBizType!
  columns: JSON
  data: JSON
  dataType: SegmentDataType!
  environmentId: String
  name: String
  projectId: String
}

input CreateAccessTokenInput {
  description: String
  name: String!
}

input CreateAttributeInput {
  bizType: Int!
  codeName: String!
  dataType: Int!
  description: String!
  displayName: String!
  projectId: String!
}

input CreateBizCompanyOnSegment {
  companyOnSegment: [BizCompanyOnSegmentInput!]!
}

input CreateBizUserOnSegment {
  userOnSegment: [BizUserOnSegmentInput!]!
}

input CreateCheckoutSessionRequest {
  interval: String!
  planType: String!
  projectId: String!
}

input CreateEnvironmentInput {
  name: String!
  projectId: String!
}

input CreateEventInput {
  attributeIds: [String!]!
  codeName: String!
  deleted: Boolean
  description: String
  displayName: String!
  eventId: String
  projectId: String!
}

input CreateIntegrationObjectMappingInput {
  destinationObjectType: String!
  enabled: Boolean
  settings: JSON
  sourceObjectType: String!
}

input CreateLocalizationInput {
  code: String!
  locale: String!
  name: String!
  projectId: String!
}

input CreateStepInput {
  contentId: String
  data: JSON
  name: String
  screenshot: JSON
  sequence: Int
  setting: JSON
  target: JSON
  themeId: String
  trigger: JSON
  type: String!
  versionId: String!
}

input CreateThemeInput {
  isDefault: Boolean!
  name: String!
  projectId: String!
  settings: JSON
  variations: JSON
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteAttributeInput {
  id: ID!
}

input DeleteBizCompanyOnSegment {
  bizCompanyIds: [String!]!
  segmentId: String!
}

input DeleteBizUserOnSegment {
  bizUserIds: [String!]!
  segmentId: String!
}

input DeleteEnvironmentInput {
  id: String!
}

input DeleteEventInput {
  id: ID!
}

input DeleteLocalizationInput {
  id: ID!
}

input DeleteSegment {
  id: ID!
}

input DeleteThemeInput {
  id: String
}

type Environment {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  name: String!
  projectId: String!
  token: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type Events {
  attributeIds: [String!]!
  codeName: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  deleted: Boolean
  description: String
  displayName: String!
  eventId: String
  id: ID!
  predefined: Boolean!
  projectId: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type GlobalConfig {
  apiUrl: String
  enabledBilling: Boolean!
  isSelfHostedMode: Boolean!
}

type Integration {
  accessToken: String!
  config: JSON

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  enabled: Boolean!
  environmentId: String!
  id: ID!
  integrationOAuth: IntegrationOAuth
  key: String!
  provider: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type IntegrationOAuth {
  accessToken: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  data: JSON
  expiresAt: DateTime!
  id: ID!
  provider: String!
  providerAccountId: String!
  refreshToken: String!
  scope: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type IntegrationObjectMapping {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  destinationObjectType: String!
  enabled: Boolean!
  id: ID!
  integration: Integration
  integrationId: String!
  isSyncing: Boolean!
  lastSyncedAt: DateTime
  settings: JSON
  sourceObjectType: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type Invite {
  code: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  email: String!
  expired: Boolean!
  id: ID!
  name: String!
  project: Project
  projectId: String!
  role: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  user: User
  userId: String!
}

input InviteTeamMemberInput {
  email: String!
  name: String!
  projectId: String!
  role: Role!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

type LicenseInfo {
  daysRemaining: Int
  error: String
  isExpired: Boolean
  isValid: Boolean
  license: String
  payload: LicensePayload
}

type LicensePayload {
  exp: Int!
  features: [String!]!
  iat: Int!
  issuer: String!
  plan: String!
  projectId: String!
  sub: String!
}

type Localization {
  code: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  isDefault: Boolean!
  locale: String!
  name: String!
  projectId: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

input LoginInput {
  email: String!
  inviteCode: String
  password: String!
}

input MagicLinkInput {
  email: String!
}

type Mutation {
  activeUserProject(data: ActiveUserProjectInput!): Boolean!
  addContentStep(data: CreateStepInput!): Step!
  addContentSteps(data: ContentStepsInput!): Common!
  cancelInvite(data: CancelInviteInput!): Boolean!
  changeEmail(data: ChangeEmailInput!): User!
  changePassword(data: ChangePasswordInput!): User!
  changeTeamMemberRole(data: ChangeTeamMemberRoleInput!): Boolean!
  copyTheme(data: CopyThemeInput!): Theme!
  createAccessToken(environmentId: String!, input: CreateAccessTokenInput!): AccessToken!
  createAttribute(data: CreateAttributeInput!): Attribute!
  createBizCompanyOnSegment(data: CreateBizCompanyOnSegment!): Common!
  createBizUserOnSegment(data: CreateBizUserOnSegment!): Common!
  createCheckoutSession(data: CreateCheckoutSessionRequest!): String!
  createContent(data: ContentInput!): Content!
  createContentVersion(data: ContentVersionInput!): Version!
  createEnvironments(data: CreateEnvironmentInput!): Environment!
  createEvent(data: CreateEventInput!): Events!
  createLocalization(data: CreateLocalizationInput!): Localization!
  createMagicLink(data: MagicLinkInput!): Register!
  createPortalSession(projectId: String!): String!
  createPresignedUrl(data: createPresignedUrlInput!): Storage!
  createSegment(data: CreatSegment!): Segment!
  createTheme(data: CreateThemeInput!): Theme!
  deleteAccessToken(accessTokenId: String!, environmentId: String!): Boolean!
  deleteAttribute(data: DeleteAttributeInput!): Attribute!
  deleteBizCompany(data: BizUserOrCompanyIdsInput!): Common!
  deleteBizCompanyOnSegment(data: DeleteBizCompanyOnSegment!): Common!
  deleteBizUser(data: BizUserOrCompanyIdsInput!): Common!
  deleteBizUserOnSegment(data: DeleteBizUserOnSegment!): Common!
  deleteContent(data: ContentIdInput!): Common!
  deleteEnvironments(data: DeleteEnvironmentInput!): Environment!
  deleteEvent(data: DeleteEventInput!): Events!
  deleteIntegrationObjectMapping(id: String!): Boolean!
  deleteLocalization(data: DeleteLocalizationInput!): Localization!
  deleteSegment(data: DeleteSegment!): Common!
  deleteSession(sessionId: String!): Boolean!
  deleteTheme(data: DeleteThemeInput!): Theme!
  disconnectIntegration(environmentId: String!, provider: String!): Integration!
  duplicateContent(data: ContentDuplicateInput!): Content!
  endSession(sessionId: String!): Boolean!
  inviteTeamMember(data: InviteTeamMemberInput!): Boolean!
  login(data: LoginInput!): Auth!
  logout: Boolean!
  publishedContentVersion(data: VersionIdInput!): Version!
  removeTeamMember(data: RemoveTeamMemberInput!): Boolean!
  resendMagicLink(data: ResendLinkInput!): Register!
  resetUserPassword(data: ResetPasswordInput!): Common!
  resetUserPasswordByCode(data: ResetPasswordByCodeInput!): Common!
  restoreContentVersion(data: VersionIdInput!): Version!
  setDefaultLocalization(id: String!): Localization!
  setDefaultTheme(themeId: String!): Theme!
  signup(data: SignupInput!): Auth!
  unpublishedContentVersion(data: ContentIdInput!): Common!
  updateAttribute(data: UpdateAttributeInput!): Attribute!
  updateContent(data: ContentUpdateInput!): Content!
  updateContentStep(data: UpdateStepInput!, stepId: String!): Common!
  updateContentVersion(data: VersionUpdateInput!): Version!
  updateEnvironments(data: UpdateEnvironmentInput!): Environment!
  updateEvent(data: UpdateEventInput!): Events!
  updateIntegration(environmentId: String!, input: UpdateIntegrationInput!, provider: String!): Integration!
  updateIntegrationObjectMapping(id: String!, input: UpdateIntegrationObjectMappingInput!): IntegrationObjectMapping!
  updateLocalization(data: UpdateLocalizationInput!): Localization!
  updateProjectLicense(license: String!, projectId: String!): Project!
  updateProjectName(name: String!, projectId: String!): Project!
  updateSegment(data: UpdateSegment!): Segment!
  updateTheme(data: UpdateThemeInput!): Theme!
  updateUser(data: UpdateUserInput!): User!
  updateVersionLocationData(data: VersionUpdateLocalizationInput!): VersionOnLocalization!
  upsertIntegrationObjectMapping(input: CreateIntegrationObjectMappingInput!, integrationId: String!): IntegrationObjectMapping!
}

type OEmbed {
  height: String!
  html: String!
  width: String!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  asc
  desc
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Project {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  customerId: String
  environments: [Environment!]
  id: String!
  license: String
  logoUrl: String
  name: String!
  subscriptionId: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type Query {
  findManyVersionLocations(versionId: String!): [VersionOnLocalization!]!
  getAccessToken(accessTokenId: String!, environmentId: String!): String!
  getAuthConfig: [AuthConfigItem!]!
  getContent(contentId: String!): Content!
  getContentVersion(versionId: String!): Version!
  getIntegration(environmentId: String!, provider: String!): Integration!
  getIntegrationObjectMapping(id: String!): IntegrationObjectMapping!
  getIntegrationObjectMappings(integrationId: String!): [IntegrationObjectMapping!]!
  getInvite(inviteId: String!): Invite!
  getInvites(projectId: String!): [Invite!]!
  getProjectLicenseInfo(projectId: String!): LicenseInfo
  getSalesforceAuthUrl(environmentId: String!, provider: String!): String!
  getSalesforceObjectFields(integrationId: String!): SalesforceObjectFields!
  getSubscriptionByProjectId(projectId: String!): SubscriptionModel!
  getSubscriptionPlans: [SubscriptionPlanModel!]!
  getSubscriptionUsage(projectId: String!): Int!
  getTeamMembers(projectId: String!): [UserOnProject!]!
  getTheme(themeId: String!): Theme!
  globalConfig: GlobalConfig!
  hello(name: String!): String!
  helloWorld: String!
  listAccessTokens(environmentId: String!): [AccessToken!]!
  listAttributeOnEvents(eventId: String!): [AttributeOnEvent!]!
  listAttributes(bizType: Int!, projectId: String!): [Attribute!]!
  listContentVersions(contentId: String!): [Version!]!
  listEvents(projectId: String!): [Events!]!
  listIntegrations(environmentId: String!): [Integration!]!
  listLocalizations(projectId: String!): [Localization!]!
  listSegment(environmentId: String): [Segment!]!
  listSessionsDetail(after: String, before: String, first: Int, last: Int, orderBy: AnalyticsOrder!, query: AnalyticsQuery!, skip: Int): BizSessionConnection!
  listThemes(projectId: String!): [Theme!]!
  me: User!
  queryBizCompany(after: String, before: String, first: Int, last: Int, orderBy: BizOrder!, query: BizQuery!, skip: Int): BizConnection!
  queryBizSession(after: String, before: String, first: Int, last: Int, orderBy: AnalyticsOrder!, query: AnalyticsQuery!, skip: Int): BizSessionConnection!
  queryBizUser(after: String, before: String, first: Int, last: Int, orderBy: BizOrder!, query: BizQuery!, skip: Int): BizUserConnection!
  queryContent(after: String, before: String, first: Int, last: Int, orderBy: ContentOrder, query: ContentQuery, skip: Int): ContentConnection!
  queryContentAnalytics(contentId: String!, endDate: String!, environmentId: String!, startDate: String!, timezone: String!): Analytics!
  queryContentQuestionAnalytics(contentId: String!, endDate: String!, environmentId: String!, startDate: String!, timezone: String!): JSON!
  queryOembedInfo(url: String!): OEmbed!
  querySessionDetail(sessionId: String!): BizSession!
  querySessionsByExternalId(after: String, before: String, first: Int, last: Int, orderBy: AnalyticsOrder!, query: SessionQuery!, skip: Int): BizSessionConnection!
  userEnvironments(projectId: String!): [Environment!]!
}

type Register {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  email: String!
  id: ID!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

input RemoveTeamMemberInput {
  projectId: String!
  userId: String!
}

input ResendLinkInput {
  id: String!
}

input ResetPasswordByCodeInput {
  code: String!
  password: String!
}

input ResetPasswordInput {
  email: String!
}

"""User role"""
enum Role {
  ADMIN
  OWNER
  USER
  VIEWER
}

type SalesforceField {
  label: String!
  name: String!
  picklistValues: [SalesforcePicklistValue!]
  referenceTo: [String!]
  required: Boolean!
  type: String!
  unique: Boolean!
}

type SalesforceObject {
  fields: [SalesforceField!]!
  label: String!
  name: String!
}

type SalesforceObjectFields {
  customObjects: [SalesforceObject!]!
  standardObjects: [SalesforceObject!]!
}

type SalesforcePicklistValue {
  label: String!
  value: String!
}

type Segment {
  bizType: SegmentBizType!
  columns: JSON

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  data: JSON
  dataType: SegmentDataType!
  environmentId: String
  id: ID!
  name: String
  projectId: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

enum SegmentBizType {
  COMPANY
  USER
}

enum SegmentDataType {
  ALL
  CONDITION
  MANUAL
}

input SessionQuery {
  contentId: String
  endDate: String
  environmentId: String!
  externalCompanyId: String
  externalUserId: String
  startDate: String
}

input SignupInput {
  code: String!
  companyName: String
  isInvite: Boolean!
  password: String!
  userName: String!
}

type Step {
  contentId: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  cvid: String!
  data: JSON
  id: ID!
  name: String
  screenshot: JSON
  sequence: Int
  setting: JSON
  target: JSON
  themeId: String
  trigger: JSON
  type: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  versionId: String!
}

input StepInput {
  data: JSON
  id: String
  name: String
  screenshot: JSON
  sequence: Int
  setting: JSON
  target: JSON
  themeId: String
  trigger: JSON
  type: String!
}

type Storage {
  cdnUrl: String!
  signedUrl: String!
}

type SubscriptionModel {
  cancelAt: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  interval: String!
  isTrial: Boolean!
  lookupKey: String!
  overridePlan: JSON
  planType: String!
  projectId: String!
  status: String!
  subscriptionId: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type SubscriptionPlanModel {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  interval: String!
  lookupKey: String!
  mauQuota: Int!
  planType: String!
  sessionCountQuota: Int!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type Theme {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  isDefault: Boolean!
  isSystem: Boolean!
  name: String!
  projectId: String!
  settings: JSON!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  variations: JSON
}

input UpdateAttributeInput {
  bizType: Int
  codeName: String
  dataType: Int
  description: String
  displayName: String
  id: String!
}

input UpdateContentInput {
  buildUrl: String
  config: JSON
  name: String
}

input UpdateEnvironmentInput {
  id: String!
  name: String!
}

input UpdateEventInput {
  attributeIds: [String!]
  codeName: String
  deleted: Boolean
  description: String
  displayName: String
  eventId: String
  id: String!
}

input UpdateIntegrationInput {
  config: JSON
  enabled: Boolean
  key: String
}

input UpdateIntegrationObjectMappingInput {
  enabled: Boolean
  settings: JSON
}

input UpdateLocalizationInput {
  code: String
  id: String!
  locale: String
  name: String
}

input UpdateSegment {
  columns: JSON
  data: JSON
  id: ID!
  name: String
}

input UpdateStepInput {
  contentId: String
  data: JSON
  name: String
  screenshot: JSON
  sequence: Int
  setting: JSON
  target: JSON
  themeId: String
  trigger: JSON
  type: String
  versionId: String
}

input UpdateThemeInput {
  id: String!
  isDefault: Boolean
  name: String
  settings: JSON
  variations: JSON
}

input UpdateUserInput {
  avatarUrl: String
  name: String!
}

type User {
  avatarUrl: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  email: String!
  id: ID!
  isOAuthUser: Boolean
  name: String
  projects: [UserOnProject!]!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type UserOnProject {
  actived: Boolean!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  project: Project!
  role: Role!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  user: User
}

type Version {
  config: JSON
  contentId: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  data: JSON
  id: ID!
  sequence: Int!
  steps: [Step!]
  themeId: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

input VersionIdInput {
  environmentId: String
  versionId: String
}

input VersionInput {
  config: JSON
  data: JSON
  themeId: String
}

type VersionOnLocalization {
  backup: JSON

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  enabled: Boolean!
  id: ID!
  localizationId: String!
  localized: JSON

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  versionId: String!
}

input VersionUpdateInput {
  content: VersionInput!
  versionId: String
}

input VersionUpdateLocalizationInput {
  backup: JSON!
  enabled: Boolean!
  localizationId: String!
  localized: JSON!
  versionId: String!
}

input createPresignedUrlInput {
  contentType: String
  fileName: String!
  storageType: String!
}